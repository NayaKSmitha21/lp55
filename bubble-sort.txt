#include <iostream>
#include <omp.h>
#include <iomanip>  // for setting output precision
using namespace std;

void bubble(int array[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (array[j] > array[j + 1]) {
                swap(array[j], array[j + 1]);
            }
        }
    }
}

void pBubble(int array[], int n) {
    // Print thread count
    #pragma omp parallel
    {
        #pragma omp single
        cout << "Parallel Bubble Sort using " << omp_get_num_threads() << " threads\n";
    }

    for (int i = 0; i < n; ++i) {
        // Odd phase
        #pragma omp parallel for
        for (int j = 1; j < n - 1; j += 2) {
            if (array[j] > array[j + 1]) {
                swap(array[j], array[j + 1]);
            }
        }

        // Even phase
        #pragma omp parallel for
        for (int j = 0; j < n - 1; j += 2) {
            if (array[j] > array[j + 1]) {
                swap(array[j], array[j + 1]);
            }
        }
    }
}

void printArray(int arr[], int n) {
    for (int i = 0; i < n && i < 100; i++)  // limit print to 100 elements
        cout << arr[i] << " ";
    cout << (n > 100 ? "... (truncated)" : "") << "\n";
}

int main() {
    int n = 100000;
    int* arr = new int[n];

    double start_time, end_time;

    // Sequential sort (run multiple times to measure time)
    for (int i = 0, j = n; i < n; i++, j--) arr[i] = j;
    start_time = omp_get_wtime();
    for (int i = 0; i < 5; ++i) {
        bubble(arr, n);  // Run bubble sort multiple times to get a meaningful time
    }
    end_time = omp_get_wtime();
    double sequentialTime = (end_time - start_time) / 5;  // Average time
    cout << "Sequential Bubble Sort took : " << fixed << setprecision(6) << scientific << sequentialTime << " seconds.\n";
    printArray(arr, n);

    // Parallel sort (run multiple times to measure time)
    for (int i = 0, j = n; i < n; i++, j--) arr[i] = j;
    start_time = omp_get_wtime();
    for (int i = 0; i < 5; ++i) {
        pBubble(arr, n);  // Run parallel bubble sort multiple times to get a meaningful time
    }
    end_time = omp_get_wtime();
    double parallelTime = (end_time - start_time) / 5;  // Average time
    cout << "Parallel Bubble Sort took : " << fixed << setprecision(6) << scientific << parallelTime << " seconds.\n";
    printArray(arr, n);

    delete[] arr;
    return 0;
}




g++ --version

_______________
cd ""

______________
g++ -fopenmp -std=c++11 main.cpp -o main.exe

______________
main.exe


